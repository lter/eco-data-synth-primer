---
title: "Module 2: Operational synthesis"
---

# Learning Objectives

After completing this module, you will be able to:

- **Identify** characteristics of reproducible coding / project organization
- **Explain** benefits of reproducibility (to your team and beyond)
- **Summarize** the advantages of creating a defined contribution workflow
- **Define** fundamental vocabulary of version control systems
- **Create** a repository on GitHub
- **Explain** how synthesis teams can use GitHub to collaborate more efficiently and reproducibly

# Reproducibility Practices

Making one's work "reproducible"--particularly in code contexts--has become increasingly popular but is not always clearly defined. For the purposes of this short course, we believe that reproducible work:

- Uses scripted workflows for all interactions with data
- Contains sufficient documentation for those outside of the project team to navigate the project's contents
- Contains detailed metadata for all data products
- 
- 
- 



## General Considerations

**Estimated time: 10 min**

Documentation!

- One folder / project
- Further organize content via sub-folders
- Make file names informative and intuitive
- Use READMEs to record organization rules / explanation
- 

Code

- Load libraries explicitly
- Track (and document) software versions
- Namespace functions (if not already required by your coding language)
- Use relative file paths that are operating system-agnostic
- Balance how descriptive object names are with striving for concise names
- _Use comments_ in the code!
- Consider custom functions
- 

Contributing

- Create a formal plan for collaborating _with which your whole team agrees_
- Quarantine external inputs
- Plan for "future you"
- 

## Synthesis Considerations

**Estimated time: 10 min**

How does reproducibility in synthesis considerations differ from individual / non-synthesis applications?

- Judgement calls need to be made / agreed to as a group
    - But "defer to the doers"
- Increased emphasis on contribution guidelines / planning being formalized
- More communication needs
- 
- 

# Version Control

## Vocabulary

**Estimated time: 5 min**

Brief definitions for a selection of fundamental version control vocabulary terms

- Version control: 
- Repository: 
- 
- 
- 

## GitHub

**Estimated time: 10 min**

While this section of the module focuses on [GitHub](https://github.com/), there are several other viable alternatives for working with Git individually or as part of a larger team (e.g., [GitLab](https://about.gitlab.com/), [GitKraken](https://www.gitkraken.com/), etc.). Any of these may be viable option for your team and we focus on GitHub here only to ensure a standard backdrop for the case studies we'll discuss shortly.

There are a _lot_ of GitHub tutorials that exist already so, rather than add our own variant to the list, we'll work through part of one created by the Scientific Computing team of the [National Center for Ecological Analysis and Synthesis](https://www.nceas.ucsb.edu/) (NCEAS). 

**See the workshop materials [here](https://nceas.github.io/scicomp-workshop-collaborative-coding/github.html).**

Given the time restrictions for this short course, we'll only cover how you engage with GitHub directly through the GitHub website. However, your chosen software for writing code will _certainly_ have a method of connecting to GitHub/etc. so if this topic is of interest it will be beneficial for you to search out the relevant tutorial.

# Synthesis Group Case Studies

**Estimated time: 10 min**

To make some of these concepts more tangible, let's consider some case studies. The following tabs contain GitHub repositories for real teams that have engaged in synthesis research and chosen to preserve and maintain their scripts in GitHub. Each has different strengths and you may find that facets of each feel most appropriate for your group to adopt. There is no single "right" way of tackling this but hopefully parts of these exemplars inspire you.

:::{.panel-tabset}
## Example 1

Highlights:

- Straightforward & transparent numbering of workflow scripts
- Custom `.gitignore` safety net

https://github.com/lter/lter-sparc-soil-p

## Example 2

Highlights:

- Really consistent file naming conventions & folder organization
- Active contribution to code base by all group members

https://github.com/lter/lterwg-flux-gradient

## Example 3

Highlights:

- Separate repositories for each manuscript
- Nice use of README as pseudo-bookmarks for later reference to other repositories


https://github.com/lter/lterwg-silica-data

:::

# Additional Resources

## Courses, Workshops, and Tutorials

- [Synthesis Skills for Early Career Researchers](https://lter.github.io/ssecr/) (SSECR) course. **2024**. LTER Network Office
- [Reproducible Approaches to Arctic Research Using R](https://learning.nceas.ucsb.edu/2024-02-arctic/) workshop. **2024**. Arctic Data Center & NCEAS Learning Hub
- [Collaborative Coding with GitHub](https://nceas.github.io/scicomp-workshop-collaborative-coding/) workshop. **2024**. NCEAS Scientific Computing team
- [Coding in the Tidyverse](https://nceas.github.io/scicomp-workshop-tidyverse/) workshop. **2023**. NCEAS Scientific Computing team
- [Shiny Apps for Sharing Science](https://njlyon0.github.io/asm-2022_shiny-workshop/) workshop. **2022**. Lyon, N.J. _et al._
- [Ten Commandments for Good Data Management](https://dynamicecology.wordpress.com/2016/08/22/ten-commandments-for-good-data-management/). **2016**. McGill, B.

## Literature

- Harrer, M. _et al._ [Doing Meta-Analysis with R: A Hands-On Guide](https://bookdown.org/MathiasHarrer/Doing_Meta_Analysis_in_R/). **2023**. _GitHub_
- Todd-Brown, K.E.O., _et al._ [Reviews and Syntheses: The Promise of Big Diverse Soil Data, Moving Current Practices Towards Future Potential](https://bg.copernicus.org/articles/19/3505/2022/). **2022**. _Biogeosciences_
- Borer, E.T. _et al._ [Some Simple Guidelines for Effective Data Management](https://esajournals.onlinelibrary.wiley.com/doi/full/10.1890/0012-9623-90.2.205). **2009**. _Ecological Society of America Bulletin_


